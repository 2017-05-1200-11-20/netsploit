#!/usr/bin/python
# coding=utf-8

import re
import os
import sys
import urllib
import socket
import threading
import webbrowser
from time import sleep
from random import randint
from subprocess import call
from contextlib import closing
try:
    import shodan
except ImportError:
    print "You have not installed the shodan module."
    print "Please install it with the following command: `pip install shodan`"
    sys.exit(1)

if not os.path.isdir(os.getcwd() + '/tools'):
    call(['bash', 'setup.sh'])

try:
    with open('.api_key', 'r') as f:
        firstline = f.readline()
    f.close()
except:
    print "Couldn't locate api key, running setup.sh"
    call(['bash', 'setup.sh'])

key = firstline.strip()

print "\033[96mStarting netsploit...\033[0m"
api = shodan.Shodan(key)
try:
    test = api.info()
except:
    print "\033[31mInvalid API key\033[0m"
    sys.exit(0)
call(['clear'])
class bcolors:
    HEADER   =  '\033[95m'
    OKBLUE   =  '\033[34m'
    OKGREEN  =  '\033[32m'
    WARNING  =  '\033[93m'
    FAIL     =  '\033[31m'
    ENDC     =  '\033[0m'
    BOLD     =  '\033[1m'
    TITLE    =  '\033[96m'
    UL       =  '\033[4m'

# predefine commands
cmds = ['search', 'exit', 'search_host', 'facets', 'help', 'myip', 'exec', 'banner', 'resolve',
'portscan', 'slowloris', 'ssl', 'mailsniff', 'heartbleed', '3d', 'robots', 'honeyscore', 'protocols',
'internet']

# Some basic UI print functions, make it look a bit nicer
def print_msg(msg):
    print bcolors.OKBLUE + bcolors.BOLD + "[*] " + bcolors.ENDC + msg

def print_err(msg):
    print bcolors.FAIL + bcolors.BOLD + "[!] " + bcolors.ENDC + str(msg)

def print_good(msg):
    print bcolors.OKGREEN + bcolors.BOLD + "[+] " + bcolors.ENDC + msg


def banner():
    banner1 =  bcolors.FAIL + bcolors.BOLD + """
                  ____
                 /  @   \==]|[=(]                  N E T S P L O I T ! !
                |--------|
                ==========       .  *                                     *
                ==========     .\ * . *.   *                         .    * \  .
               ||||||||||||      \ * ./  *    .   * SYN   ACK   SYN      .  \ \\
              |||||||||| --]%%%%%% .- =--=---=-=-=-=--=-=--=-==-----=-=-=-=-=-=
              [=========\  ]===========(  *         ACK   SYN   ACK     . /  /
             [==============|   / *  \    .                          *  *   /  .
             C| @ @ @ @ @ @ D         *      *                        *
              |              \           .                          *  *
            C| @  @ @  @ @ @  D       .
             |                 \          *                          *
           C| @  @  @  @  @  @  D
            |                    \
          C| @  @  @   @   @   @  D
           |                       \\
          |@@@@@@@@@@@@@@@@@@@@@@@@@|
           -------------------------

\033[0mBy thecarterb <0xCB[at]protonmail.com>
"""

    banner2 = bcolors.OKBLUE + bcolors.BOLD + """
                 ____________________________________________________
                /                                                    \\
               |    _____________________________________________     |
               |   |                                             |    |
               |   |  bash$ ./netsploit                          |    |
               |   |                                             |    |
               |   |                                             |    |
               |   |                                             |    |
               |   |                                             |    |
               |   |                                             |    |
               |   |                                             |    |
               |   |                                             |    |
               |   |                                             |    |
               |   |                                             |    |
               |   |                                             |    |
               |   |                                             |    |
               |   |_____________________________________________|    |
               |                                                      |
                \_____________________________________________________/
                       \_______________________________________/
                    _______________________________________________
                 _-'    .-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.  --- `-_
              _-'.-.-. .---.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.--.  .-.-.`-_
           _-'.-.-.-. .---.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-`__`. .-.-.-.`-_
        _-'.-.-.-.-. .-----.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-----. .-.-.-.-.`-_
     _-'.-.-.-.-.-. .---.-. .-----------------------------. .-.---. .---.-.-.-.`-_
    :-----------------------------------------------------------------------------:
    `---._.-----------------------------------------------------------------._.---'
    """ + bcolors.ENDC

    banner3 = bcolors.OKGREEN + """
                                NETSPLOIT
          _                      _______                      _
       _dMMMb._              .adOOOOOOOOOba.              _,dMMMb_
      dP'  ~YMMb            dOOOOOOOOOOOOOOOb            aMMP~  `Yb
      V      ~"Mb          dOOOOOOOOOOOOOOOOOb          dM"~      V
               `Mb.       dOOOOOOOOOOOOOOOOOOOb       ,dM'
                `YMb._   |OOOOOOOOOOOOOOOOOOOOO|   _,dMP'
           __     `YMMM| OP'~"YOOOOOOOOOOOP"~`YO |MMMP'     __
         ,dMMMb.     ~~' OO     `YOOOOOP'     OO `~~     ,dMMMb.
      _,dP~  `YMba_      OOb      `OOO'      dOO      _aMMP'  ~Yb._
     <MMP'     `~YMMa_   YOOo   @  OOO  @   oOOP   _adMP~'      `YMM>
                  `YMMMM\`OOOo     OOO     oOOO'/MMMMP'
          ,aa.     `~YMMb `OOOb._,dOOOb._,dOOO'dMMP~'       ,aa.
        ,dMYYMba._         `OOOOOOOOOOOOOOOOO'          _,adMYYMb.
       ,MP'   `YMMba._      OOOOOOOOOOOOOOOOO       _,adMMP'   `YM.
       MP'        ~YMMMba._ YOOOOPVVVVVYOOOOP  _,adMMMMP~       `YM
       YMb           ~YMMMM\`OOOOI`````IOOOOO'/MMMMP~           dMP
        `Mb.           `YMMMb`OOOI,,,,,IOOOO'dMMMP'           ,dM'
          `'                  `OObNNNNNdOO'                   `'
                                `~OOOOO~'   BLEEG BLERG, ALL YOUR PLANETS ARE BELONG TO US
    """ + bcolors.ENDC

    banner4 = """
    　 ｀¨ －　､　　　　　＿_　　　　　 _,. -‐' ¨´
    　　　　　　| ｀Tｰて＿,＿｀　`ー<^ヽ
    　　　　　　|　 !　　　　　　｀ヽ　　 ヽ ヽ
    　　　　　 r　/　　　　　　ヽ　 ヽ　　_Lj
    　､　　　 /´ ＼　　　　 ＼　＼_j／ヽ
    　　｀ ー　　　ヽｲ⌒r-､ヽ ヽ__j´　　　｀¨´
    　　　　　　　　　 ￣ー┴'^´           If only networks could do this securely
    """
    randnum = randint(1, 4)
    if randnum == 1:
        return banner1
    elif randnum == 2:
        return banner2
    elif randnum == 3:
        return banner3
    else:
        return banner4


#####################
#                   #
#   These handle    #
#   the commands    #
#                   #
#####################
def search(content, outfile=False, filename=''):
    print_msg("Searching for {}".format(content))
    if outfile:
        print_msg("Outputting to \'{}\'".format(filename))
    else:
        print_msg("Printing to STDOUT")
    results = api.search(content)  # Search shodan
    if outfile:
        with open(filename, 'w') as outf:
            for result in results['matches']:
                outf.write(result['ip_str'] + "\n")
    else:
        for result in results['matches']:
            print_good(result['ip_str'])

def search_host(hostname, outfile=False, filename=''):
    if ".com" in hostname or ".org" in hostname or ".net" in hostname or ".io" in hostname:
        hstip = socket.gethostbyname(hostname)
        print_msg("Searching shodan for {}({})...".format(hstip, hostname))
        host = api.host(hstip)
    else:
        print_msg("Searching for {}".format(hostname))
        host = api.host(hostname)
    if outfile:
        print_msg("Outputting results to: %s" % filename)
    else:
        print_msg("Outputting results to STDOUT")

    if outfile:
        with open(filename, 'w') as outf:
            outf.write("IP: %s\n" % host['ip_str'])
            outf.write("Organization: %s\n" % host.get('org', 'n/a'))
            outf.write("Operating System: %s\n" % host.get('os', 'n/a'))
            for item in host['data']:
                outf.write("Port: %s\n" % item['port'])
                outf.write("Banner: %s\n" % item['data'])

    # print general information about host
    print_good("IP: %s" % host['ip_str'])
    print_good("Organization: %s" % host.get('org', 'n/a'))
    print_good("Operating System: %s" % host.get('os', 'n/a'))

    for item in host['data']:
        print """
                Port: %s
                Banner: %s
        """ % (item['port'], item['data'])

def facet_search(query, num):
    FACETS = [
        'org',
        'domain',
        'port',
        'asn',

        ('country', num),
]

    FACET_TITLES = {
        'org': 'Top {} Organizations'.format(num),
        'domain': 'Top {} Domains'.format(num),
        'port': 'Top {} Ports'.format(num),
        'asn': 'Top {} Autonomous Systems'.format(num),
        'country': 'Top {} Countries'.format(num),
    }
    print_msg("Searching for facets (top {} results)".format(num))
    result = api.count(query, facets=FACETS)

    print 'Shodan Summary Information'
    print 'Query: %s' % query
    print 'Total Results: %s\n' % result['total']

    # Print the summary info from the facets
    for facet in result['facets']:
        print FACET_TITLES[facet].replace()

        for term in result['facets'][facet]:
            print '%s: %s' % (term['value'], term['count'])

        # Print an empty line between summary info
        print ''

def myip():
    f = urllib.urlopen("http://www.canyouseeme.org/")
    html_doc = f.read()
    f.close()
    m = re.search('(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)',html_doc)
    print_good("Your IP is %s" % m.group(0))

def portscan(host, mini, maxi):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    open_ports = 0
    for port in range(mini, maxi):
        result = s.connect_ex((host, port))
        if result == 0:
            print_good("Open port: {}".format(port))
            open_ports += 1
    print_msg("{} has {} open ports.".format(host, open_ports))

def slowloris(tgt, port='80'):
    print_msg("Attacking {} on port {}".format(tgt, port))
    call(['python', 'tools/slowloris/slowloris.py', tgt, '-ua', '-p', port])

def ssl(target, outfile=False, filename=''):
    if not outfile:
        print_msg("Analyzing {}".format(target))
        print_msg("Printing to STDOUT")
        call(['sslyze', '--regular', target])
    else:
        print_msg("Analyzing {}".format(target))
        print_msg("Outputting to {}".format(filename))
        call(['sslyze', '--regular', target, ' > ', filename])

def mailsniff(interface, time):
    try:
        call(['python', 'tools/mail0wner/mail0wner.py', '-q', '-i', interface, '-t', time])
    except KeyboardInterrupt:
        print_err("Stopping sniff...")
        sleep(1)

def hb_test(target, outfile=False, filename=''):
    if not outfile:
        call(['python', 'tools/heartbleed/hb-test.py', target])
    else:
        print_msg("Outputting to {}".format(filename))
        call(['python', 'tools/heartbleed/hb-test.py', '-f', filename, target])

def getbots(host):
    try:
        with closing(urlopen("https://www.google.com/robots.txt")) as stream:
            print stream.read()
    except:
        print_err("{} doesnt have a robots.txt file".format(host))

def honey(ip):
    try:
        score = api.labs.honeyscore(ip)
        if score == 1.0:
            print_good("{} is a honeypot!".format(ip))
        elif score > 0.5:
            print "{}[-]{}{ } is probably a honeypot.".format(bcolors.WARN, bcolors.ENDC, ip)
        elif score <= 0.5 and score is not 0.0:
            pring_msg("{} is probably not a honeypot.".format(ip))
        else:
            print_err("{} is not a honeypot.".format(ip))
        print_msg("{} honeyscore: {}".format(ip, score))
    except Exception as e:
        print_err("Could not determine honeyscore. ({})".format(e))

def protocols():
    try:
        prots = api.protocols()

        for name, description in iter(prots.items()):
            print_msg('{0:<30}'.format(name) + description)
    except shodan.APIError as e:
        print_err(str(e))

#####################
#                   #
#   This handles    #
#   the prompt      #
#                   #
#####################

def main():
    ban = banner()
    print ban
    while True:
        try:
            user_in = raw_input(bcolors.UL + "netsploit{} > ".format(bcolors.ENDC))  # prompt


            # BUG: input validation needs to be fixed. right now
            # if "search" and "facets" are in the same input
            # line, it doesnt know what to do. It's assuming
            # the standard input, but bugs WILL occur if it's
            # not formatted correctly

            if cmds[0] in user_in and not "_host" in user_in:  # search
                inarr = user_in.split(' ')
                if len(inarr) == 1:
                    print "\'search\' usage: search <query> [output_file]"
                elif len(inarr) == 2:
                    search(inarr[1])
                elif len(inarr) == 3:
                    search(inarr[1], True, inarr[2])

            elif cmds[1] in user_in:  # exit
                print_err("Exiting.")
                sys.exit(0)

            elif cmds[2] in user_in:  # search_host
                inarr = user_in.split(' ')
                if len(inarr) == 1:
                    print_msg("\'search_host\' usage: search_host <hostname> [outfilename]")
                elif len(inarr) == 2:
                    search_host(inarr[1])
                elif len(inarr) == 3:
                    search_host(inarr[1], True, inarr[2])

            elif cmds[3] in user_in: # facets
                inarr = user_in.split(' ')
                if len(inarr) == 1:
                    print_msg("\'facets\' usage: facets \"<search query>\" <number of countries>")
                elif len(inarr) == 2:
                    print_msg("Missing country number")
                elif len(inarr) == 3:
                    facet_search(inarr[1:], inarr[len(inarr) - 1])  # TODO test this

            elif user_in == cmds[4]: # help, TODO: update facets() to original
                print """
Shodan commands:

  Command         Meaning
 ---------       ---------
  3d             open shodan 3d in your browser
  honeyscore     check if an ip is a honeypot or not (0.0 - 1.0)
  key            display your shodan API key
  protocols      show protocols you can scan
  search         basic shodan search
  search_host    search shodan for a given host
  facets         gets top ports, services, companies, etc.


Networking commands:

  Command         Meaning
 ---------       ---------
  internet       scan the whole internet on a given port (noisy)
  resolve        resolve the ip of a given hostname
  myip           get your external IP
  slowloris      do a slowloris attack on a target(IP)
  ssl            do a scan of the targets SSL configuration
  mailsniff      sniff the local network for email credentials
  heartbleed     determine if a server is vulnerable to heartbleed


Misc commands:

  Command         Meaning
 ---------       ---------
  banner         print a starting banner
  clear          clear the screen
  help           print this help message
  exec           execute shell commands
  exit           exit netsploit
                """
#robots         get a website's robots.txt

            elif user_in == '':
                pass
            elif user_in == "clear":
                print_msg("exec: clear")
                call(["clear"])
            elif user_in == cmds[5]:
                myip()
            elif cmds[6] in user_in:
                inarr = user_in.split(' ')
                call(inarr[1:])  # This doesn't really need its own function, as it's only used once
            elif user_in == cmds[7]:
                ban = banner()
                print ban
            elif cmds[8] in user_in:
                inarr = user_in.split(' ')
                if len(inarr) < 2:
                    print "\'resolve\' usage: resolve <domain>"
                try:
                    print_good("{} is {}".format(inarr[1], socket.gethostbyname(inarr[1])))
                except Exception:
                    print_err("Could not resolve {}".format(inarr[1]))
            elif cmds[9] in user_in:
                inarr = user_in.split(' ')
                if len(inarr) < 2:
                    print_msg("\'portscan\' usage: portscan <ip> <min port> <max port>")
                else:
                    portscan(inarr[2], inarr[3], inarr[4])
            elif cmds[10] in user_in:
                inarr = user_in.split(' ')
                if len(inarr) < 2 and not len(inarr) > 4:
                    print_msg("\'slowloris\' usage: slowloris <target IP> [port (default: 80)]")
                elif len(inarr) == 3:
                    try:
                        slowloris(inarr[1], inarr[2])
                    except KeyboardInterrupt:
                        continue
                else:
                    try:
                        slowloris(inarr[1])
                    except KeyboardInterrupt:
                        continue
            elif cmds[11] in user_in:
                inarr = user_in.split(' ')
                if len(inarr) < 2:
                    print_msg("\'ssl\' usage: ssl <target> [outfilename]")
                elif len(inarr) == 2:
                    ssl(inarr[1])
                elif len(inarr) == 3:
                    ssl(inarr[1], True, inarr[2])
            elif user_in == "key":
                print_msg("Your Shodan API key is: {}".format(key))
            elif cmds[12] in user_in:
                inarr = user_in.split(' ')
                if len(inarr) < 2:
                    print_msg("\'mailsniff\' usage: mailsniff <interface> <time>")
                elif len(inarr) == 2:
                    print_err("Not a full command!")
                    print_msg("\'mailsniff\' usage: mailsniff <interface> <time>")
                else:
                    mailsniff(inarr[1], inarr[2])
            elif cmds[13] in user_in:
                inarr = user_in.split(' ')
                if len(inarr) < 2:
                    print_msg("\'heartbleed\' usage: heartbleed <target ip> [memdumpfile]")
                elif len(inarr) == 2:
                    hb_test(inarr[1])
                else:
                    hb_test(inarr[1], True, inarr[2])
            elif user_in == cmds[14]:
                new = 2
                url = "https://simple.shodan.io/"
                webbrowser.open(url, new=new)
            elif cmds[15] in user_in:
                inarr = user_in.split(' ')
                if len(inarr) < 2:
                    print_msg("\'robots\' usage: robots <host>")
                elif len(inarr) == 2:
                    getbots(inarr[1])
                else:
                    pass
            elif cmds[16] in user_in:
                inarr = user_in.split(' ')
                if len(inarr) < 2:
                    print_msg("\'honeyscore\' usage: honeyscore <ip>")
                else:
                    honey(inarr[1])
            elif cmds[17] in user_in:
                protocols()
            elif cmds[18] in user_in:
                inarr = user_in.split(' ')
                if len(inarr) < 2:
                    print_msg("\'internet\' usage: internet <port> [outfilename]")
                elif len(inarr) == 2:
                    print_msg("Outputting to STDOUT.")
                    call(['zmap', '-p', inarr[1]])  # again, a function isn't really needed
                elif len(inarr) == 3:
                    print_msg("Outputting to {}".format(inarr[2]))
                    call(['zmap', '-p', port, '-o', inarr[2]])
            else:
                print_err("Unknown command: {}".format(user_in))
        except Exception as e:
            print_err(e)
            pass
        except KeyboardInterrupt:
            print "\n"
            print_msg("Use \"exit\" to exit the program")
            pass



if __name__ == "__main__":
    main()
